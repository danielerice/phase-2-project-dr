'use strict';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

const {
  loaderByName,
  removeLoaders,
  throwUnexpectedConfigError
} = require("@craco/craco");

const CracoLessPlugin = require("craco-less");

const path = require("path");

const overrideWebpackConfig = ({
  context,
  pluginOptions,
  webpackConfig
}) => {
  pluginOptions = _objectSpread2({
    lessLoaderOptions: {
      lessOptions: {
        math: "always"
      }
    }
  }, pluginOptions); // add alias to theme.config

  webpackConfig.resolve.alias["../../theme.config$"] = path.join(context.paths.appSrc, "/semantic-ui/theme.config");
  const oneOfRule = webpackConfig.module.rules.find(rule => rule.oneOf);

  if (!oneOfRule) {
    throwUnexpectedConfigError({
      packageName: "@semantic-ui-react/craco-less",
      message: "Can't find a 'oneOf' rule under module.rules in the " + `${context.env} webpack config!`
    });
  }

  const resourceLoader = oneOfRule.oneOf.find(({
    type
  }) => type === "asset/resource");

  if (!resourceLoader) {
    throwUnexpectedConfigError({
      packageName: "@semantic-ui-react/craco-less",
      message: "Can't find a 'asset/resource' loader under module.rules in the " + `${context.env} webpack config!`
    });
  }

  resourceLoader.exclude.push(/theme.config$/);
  resourceLoader.exclude.push(/\.variables$/);
  resourceLoader.exclude.push(/\.overrides$/); // resolve-url-loader:
  // should be removed as it causes bugs
  // https://github.com/Semantic-Org/Semantic-UI-React/issues/3761

  const {
    hasRemovedAny
  } = removeLoaders(webpackConfig, loaderByName("resolve-url-loader"));

  if (!hasRemovedAny) {
    throwUnexpectedConfigError({
      packageName: "@semantic-ui-react/craco-less",
      message: `Can't find "resolve-url-loader" in the ${context.env} webpack config!`
    });
  } // less-loader:
  // craco-less is reused


  return CracoLessPlugin.overrideWebpackConfig({
    context,
    pluginOptions,
    webpackConfig
  });
};

module.exports = {
  overrideWebpackConfig
};
//# sourceMappingURL=index.js.map
